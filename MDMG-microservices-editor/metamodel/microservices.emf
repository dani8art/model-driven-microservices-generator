@gmf
@"http://www.eclipse.org/OCL/Import"(ecore="http://www.eclipse.org/emf/2002/Ecore")
@Ecore(invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")
@namespace(uri="http://cloud.microservices", prefix="cloud")
package microservices;

@gmf.diagram
@Ecore(constraints="sameName samePort emptyPort")
@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(sameName="
			self.microservices->isUnique(m:Microservice | m.name)", samePort="
			self.microservices->isUnique(m:Microservice | m.port)", emptyPort="
			self.microservices->forAll(m:Microservice | m.port = 0) implies self.microservices.port = self.microservices.imagePort")
class Application {
  val Microservice[+] microservices;
  val Group[*] groups;
  val Connection[*] connections;
  attr String name;
}

@gmf.node(label="name", label.icon="false", label.placement="external", svg.uri="platform:/plugin/MDMG-microservices-editor/icons/microservice.svg", figure="svg", tool.name="Microservice", tool.description="Microservice")
@Ecore(constraints="sameName dosExternal")
@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(sameName="
			self.group->isUnique(g:Group | g.name)", dosExternal="
			self.toConnection ->select(type = ConnectionType::EXTERNAL)->size()<=1")
class Microservice {
  attr String name;
  attr int port;
  attr String image;
  attr int imagePort;
  ref Group#microservices group;
  ref Connection[+]#fromMicroservice fromConnection;
  ref Connection[*]#toMicroservice toConnection;
}

@gmf.link(source="fromMicroservice", target="toMicroservice", target.decoration="arrow", style="dash")
@Ecore(constraints="external")
@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(external="
			type = ConnectionType::EXTERNAL implies toMicroservice->isEmpty()")
class Connection {
  attr ConnectionType type;
  ref Microservice[1]#fromConnection fromMicroservice;
  ref Microservice#toConnection toMicroservice;
}

enum ConnectionType {
  INTERNAL = 1;
  EXTERNAL = 2;
}

@gmf.node(label="name", label.icon="false", figure="rounded", tool.description="Group")
class Group {
  attr String name;

  @gmf.compartment(collapsible="false")
  val Microservice[*]#group microservices;
}

